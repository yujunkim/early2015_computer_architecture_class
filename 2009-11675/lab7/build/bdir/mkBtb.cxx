/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Wed Jun  3 12:55:27 KST 2015
 * 
 */
#include "bluesim_primitives.h"
#include "mkBtb.h"

namespace bluesim
{
  
  /* Constructor */
  MOD_mkBtb::MOD_mkBtb(char const *name, Module *parent)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      INST_ppcArr("ppcArr", this, 6u, 32u, (tUInt8)0u, (tUInt8)63u),
      INST_tagArr("tagArr", this, 6u, 25u, (tUInt8)0u, (tUInt8)63u),
      PORT_RST_N((tUInt8)1u)
  {
    PORT_update_rd.setSize(66u);
    PORT_update_rd.clear();
    symbol_count = 3u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkBtb::init_symbols_0()
  {
    init_symbol(&symbols[0u], "ppcArr", SYM_MODULE, &INST_ppcArr);
    init_symbol(&symbols[1u], "tagArr", SYM_MODULE, &INST_tagArr);
    init_symbol(&symbols[2u], "update_rd", SYM_PORT, &PORT_update_rd, 66u);
  }
  
  
  /* Rule actions */
  
  
  /* Methods */
  
  tUInt32 MOD_mkBtb::METH_predPc(tUInt32 ARG_predPc_pc, tUInt8 ARG_predPc_iCode)
  {
    tUInt32 PORT_predPc;
    tUInt32 DEF_valP__h429;
    tUInt8 DEF_tagArr_sub_predPc_pc_BITS_7_TO_2_BIT_24_AND_pr_ETC___d7;
    tUInt32 DEF_tag__h426;
    tUInt32 DEF_tagArr_sub_predPc_pc_BITS_7_TO_2___d36;
    tUInt8 DEF_idx__h425;
    tUInt32 DEF_ret__h513;
    DEF_idx__h425 = (tUInt8)((tUInt8)63u & (ARG_predPc_pc >> 2u));
    DEF_ret__h513 = INST_ppcArr.METH_sub(DEF_idx__h425);
    DEF_tagArr_sub_predPc_pc_BITS_7_TO_2___d36 = INST_tagArr.METH_sub(DEF_idx__h425);
    DEF_tag__h426 = (tUInt32)(ARG_predPc_pc >> 8u);
    DEF_tagArr_sub_predPc_pc_BITS_7_TO_2_BIT_24_AND_pr_ETC___d7 = (tUInt8)(DEF_tagArr_sub_predPc_pc_BITS_7_TO_2___d36 >> 24u) && DEF_tag__h426 == ((tUInt32)(16777215u & DEF_tagArr_sub_predPc_pc_BITS_7_TO_2___d36));
    DEF_valP__h429 = ARG_predPc_pc + ((ARG_predPc_iCode == (tUInt8)0u || ARG_predPc_iCode == (tUInt8)1u) || ARG_predPc_iCode == (tUInt8)9u ? 1u : ((((ARG_predPc_iCode == (tUInt8)2u || ARG_predPc_iCode == (tUInt8)6u) || ARG_predPc_iCode == (tUInt8)10u) || ARG_predPc_iCode == (tUInt8)11u) || ARG_predPc_iCode == (tUInt8)12u ? 2u : (ARG_predPc_iCode == (tUInt8)7u || ARG_predPc_iCode == (tUInt8)8u ? 5u : 6u)));
    PORT_predPc = DEF_tagArr_sub_predPc_pc_BITS_7_TO_2_BIT_24_AND_pr_ETC___d7 ? DEF_ret__h513 : DEF_valP__h429;
    return PORT_predPc;
  }
  
  tUInt8 MOD_mkBtb::METH_RDY_predPc()
  {
    tUInt8 PORT_RDY_predPc;
    tUInt8 DEF_CAN_FIRE_predPc;
    DEF_CAN_FIRE_predPc = (tUInt8)1u;
    PORT_RDY_predPc = DEF_CAN_FIRE_predPc;
    return PORT_RDY_predPc;
  }
  
  void MOD_mkBtb::METH_update(tUWide ARG_update_rd)
  {
    tUInt32 DEF__1_CONCAT_update_rd_BITS_65_TO_42_2___d33;
    tUInt8 DEF_update_rd_BIT_1___d35;
    tUInt8 DEF_idx__h613;
    tUInt32 DEF_x__h674;
    PORT_update_rd = ARG_update_rd;
    DEF_x__h674 = primExtract32(32u, 66u, ARG_update_rd, 32u, 33u, 32u, 2u);
    DEF_idx__h613 = primExtract8(6u, 66u, ARG_update_rd, 32u, 41u, 32u, 36u);
    DEF_update_rd_BIT_1___d35 = primExtract8(1u, 66u, ARG_update_rd, 32u, 1u, 32u, 1u);
    DEF__1_CONCAT_update_rd_BITS_65_TO_42_2___d33 = 33554431u & ((((tUInt32)((tUInt8)1u)) << 24u) | primExtract32(24u,
														  66u,
														  ARG_update_rd,
														  32u,
														  65u,
														  32u,
														  42u));
    if (DEF_update_rd_BIT_1___d35)
      INST_tagArr.METH_upd(DEF_idx__h613, DEF__1_CONCAT_update_rd_BITS_65_TO_42_2___d33);
    if (DEF_update_rd_BIT_1___d35)
      INST_ppcArr.METH_upd(DEF_idx__h613, DEF_x__h674);
  }
  
  tUInt8 MOD_mkBtb::METH_RDY_update()
  {
    tUInt8 PORT_RDY_update;
    tUInt8 DEF_CAN_FIRE_update;
    DEF_CAN_FIRE_update = (tUInt8)1u;
    PORT_RDY_update = DEF_CAN_FIRE_update;
    return PORT_RDY_update;
  }
  
  
  /* Reset routines */
  
  void MOD_mkBtb::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkBtb::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkBtb::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_ppcArr.dump_state(indent + 2u);
    INST_tagArr.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkBtb::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(4u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "update_rd", 66u);
    num = INST_ppcArr.dump_VCD_defs(num);
    num = INST_tagArr.dump_VCD_defs(num);
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkBtb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBtb &backing)
  {
    vcd_defs(dt, backing);
    vcd_prims(dt, backing);
  }
  
  void MOD_mkBtb::vcd_defs(tVCDDumpType dt, MOD_mkBtb &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 66u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.PORT_update_rd) != PORT_update_rd)
	{
	  vcd_write_val(num, PORT_update_rd, 66u);
	  backing.PORT_update_rd = PORT_update_rd;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, PORT_update_rd, 66u);
	backing.PORT_update_rd = PORT_update_rd;
      }
  }
  
  void MOD_mkBtb::vcd_prims(tVCDDumpType dt, MOD_mkBtb &backing)
  {
    INST_ppcArr.dump_VCD(dt, backing.INST_ppcArr);
    INST_tagArr.dump_VCD(dt, backing.INST_tagArr);
  }
}
